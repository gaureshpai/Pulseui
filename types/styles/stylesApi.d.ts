import * as React from "react";
import type { CSSProperties } from "react";
export type Spacing = "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
export type Color = "primary" | "secondary" | "success" | "warning" | "error" | "info" | "surface" | "text" | "border" | "background" | "white" | "black" | "gray-0" | "gray-1" | "gray-2" | "gray-3" | "gray-4" | "gray-5" | "gray-6" | "gray-7" | "gray-8" | "gray-9" | "blue-0" | "blue-1" | "blue-2" | "blue-3" | "blue-4" | "blue-5" | "blue-6" | "blue-7" | "blue-8" | "blue-9" | "red-0" | "red-1" | "red-2" | "red-3" | "red-4" | "red-5" | "red-6" | "red-7" | "red-8" | "red-9" | "green-0" | "green-1" | "green-2" | "green-3" | "green-4" | "green-5" | "green-6" | "green-7" | "green-8" | "green-9" | "yellow-0" | "yellow-1" | "yellow-2" | "yellow-3" | "yellow-4" | "yellow-5" | "yellow-6" | "yellow-7" | "yellow-8" | "yellow-9";
export type TypographyVariant = "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "text-xs" | "text-sm" | "text-md" | "text-lg" | "text-xl";
export type FontWeight = "normal" | "medium" | "semibold" | "bold";
export type BorderRadius = "xs" | "sm" | "md" | "lg" | "xl" | "full";
export type Shadow = "xs" | "sm" | "md" | "lg" | "xl";
export interface SxProps {
    display?: CSSProperties["display"];
    position?: CSSProperties["position"];
    top?: number | string;
    right?: number | string;
    bottom?: number | string;
    left?: number | string;
    zIndex?: number;
    m?: number | Spacing;
    mt?: number | Spacing;
    mr?: number | Spacing;
    mb?: number | Spacing;
    ml?: number | Spacing;
    mx?: number | Spacing;
    my?: number | Spacing;
    p?: number | Spacing;
    pt?: number | Spacing;
    pr?: number | Spacing;
    pb?: number | Spacing;
    pl?: number | Spacing;
    px?: number | Spacing;
    py?: number | Spacing;
    width?: number | string | "auto" | "full" | "fit-content";
    height?: number | string | "auto" | "full" | "fit-content";
    minWidth?: number | string;
    maxWidth?: number | string;
    minHeight?: number | string;
    maxHeight?: number | string;
    typography?: TypographyVariant;
    fontSize?: number | string | "xs" | "sm" | "md" | "lg" | "xl";
    fontWeight?: FontWeight;
    lineHeight?: number | string;
    textAlign?: CSSProperties["textAlign"];
    textDecoration?: CSSProperties["textDecoration"];
    textTransform?: CSSProperties["textTransform"];
    color?: Color;
    backgroundColor?: Color;
    borderColor?: Color;
    border?: number | string;
    borderTop?: number | string;
    borderRight?: number | string;
    borderBottom?: number | string;
    borderLeft?: number | string;
    borderRadius?: BorderRadius | number | string;
    borderStyle?: CSSProperties["borderStyle"];
    boxShadow?: Shadow | string;
    opacity?: number;
    flex?: number | string;
    flexDirection?: CSSProperties["flexDirection"];
    flexWrap?: CSSProperties["flexWrap"];
    alignItems?: CSSProperties["alignItems"];
    alignContent?: CSSProperties["alignContent"];
    alignSelf?: CSSProperties["alignSelf"];
    justifyContent?: CSSProperties["justifyContent"];
    justifyItems?: CSSProperties["justifyItems"];
    justifySelf?: CSSProperties["justifySelf"];
    order?: number;
    flexGrow?: number;
    flexShrink?: number;
    flexBasis?: number | string;
    gridArea?: CSSProperties["gridArea"];
    gridColumn?: CSSProperties["gridColumn"];
    gridRow?: CSSProperties["gridRow"];
    gridColumnStart?: CSSProperties["gridColumnStart"];
    gridColumnEnd?: CSSProperties["gridColumnEnd"];
    gridRowStart?: CSSProperties["gridRowStart"];
    gridRowEnd?: CSSProperties["gridRowEnd"];
    transform?: CSSProperties["transform"];
    transformOrigin?: CSSProperties["transformOrigin"];
    transition?: CSSProperties["transition"];
    transitionProperty?: CSSProperties["transitionProperty"];
    transitionDuration?: CSSProperties["transitionDuration"];
    transitionTimingFunction?: CSSProperties["transitionTimingFunction"];
    transitionDelay?: CSSProperties["transitionDelay"];
    cursor?: CSSProperties["cursor"];
    overflow?: CSSProperties["overflow"];
    overflowX?: CSSProperties["overflowX"];
    overflowY?: CSSProperties["overflowY"];
    userSelect?: CSSProperties["userSelect"];
    [key: string]: any;
}
export interface Theme {
    colors: Record<Color, string>;
    spacing: Record<Spacing, string>;
    typography: Record<TypographyVariant, {
        fontSize: string;
        lineHeight: string;
        fontWeight: FontWeight;
    }>;
    borderRadius: Record<BorderRadius, string>;
    shadows: Record<Shadow, string>;
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}
export declare const defaultTheme: Theme;
export declare const getSpacingValue: (value: number | Spacing, theme: Theme) => string;
export declare const getColorValue: (color: Color, theme: Theme) => string;
export declare const getTypographyValue: (variant: TypographyVariant, theme: Theme) => {
    fontSize: string;
    lineHeight: string;
    fontWeight: FontWeight;
};
export declare const getBorderRadiusValue: (radius: BorderRadius, theme: Theme) => string;
export declare const getShadowValue: (shadow: Shadow, theme: Theme) => string;
export declare const processSxProps: (sx: SxProps, theme?: Theme) => CSSProperties;
export declare const styled: (component: string | React.ComponentType<any>, defaultSx?: SxProps) => React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Box: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Typography: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Container: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Stack: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Grid: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Paper: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Card: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Button: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Input: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const TextField: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Label: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const HelperText: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const ErrorText: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Divider: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Avatar: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Badge: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Chip: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Alert: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const AlertSuccess: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const AlertWarning: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const AlertError: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const AlertInfo: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Modal: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const ModalContent: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Tooltip: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Skeleton: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Progress: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const ProgressBar: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Switch: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const SwitchThumb: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Checkbox: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Radio: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Select: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Textarea: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Link: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Image: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Icon: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
export declare const Spinner: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<any>>;
